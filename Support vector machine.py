# -*- coding: utf-8 -*-
"""SVM.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13HOqVbOz186MxKfG5dk8UQZvGjAtIJX3
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.metrics import mean_squared_error, mean_absolute_error
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR

df = pd.read_csv('viscoo.csv')

# split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(df[['x1', 'x2']], df['visc'], test_size=0.2, random_state=42)

#X_train = df[['x1','x2']]
#y_train = df['visc'].values

#y_train = y_train.reshape(-1,1)

# feature scaling
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# hyperparameter tuning
param_grid = {'C': [0.1, 1, 10], 'gamma': [0.1, 0.01, 0.001], 'kernel': ['rbf']}
regressor = GridSearchCV(SVR(), param_grid, cv=5)
regressor.fit(X_train_scaled, y_train)

# predict on the training set
y_pred_train = regressor.predict(X_train_scaled)

# predict on the testing set
y_pred_test = regressor.predict(X_test_scaled)

print(y_train)

print(y_pred_train)

# evaluate the model
print("Mean square error train:", mean_squared_error(y_train, y_pred_train))
print("Mean absolute error train:", mean_absolute_error(y_train, y_pred_train))
print("Mean square error test:", mean_squared_error(y_test, y_pred_test))
print("Mean absolute error test:", mean_absolute_error(y_test, y_pred_test))

from sklearn.preprocessing import StandardScaler
StdS_X = StandardScaler()
StdS_y = StandardScaler()
X_l = StdS_X.fit_transform(X_train)
y_p = StdS_y.fit_transform(y_train)

from sklearn.svm import SVR
# create the model object
regressor = SVR(kernel = 'rbf')
# fit the model on the data
regressor.fit(X_l, y_p)

A=regressor.predict(X_train)

y_pred_train = StdS_y.inverse_transform(A.reshape(-1, 1))

print(y_train)

print(y_pred_train)

print("Mean square error train",mean_squared_error(y_train, y_pred_train))
print("Mean absolute error training",mean_absolute_error(y_train, y_pred_train))